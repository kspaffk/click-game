{"version":3,"sources":["components/Header/index.js","components/Image/index.js","components/Result/index.js","App.js","index.js"],"names":["Header","props","className","score","topScore","Images","src","image","imgURL","alt","onClick","clicked","id","Result","correct","App","state","images","imagesData","clickedId","shuffleImages","find","isClicked","setState","resetGame","prevState","updatedImages","map","newScore","newTopScore","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","hasWon","this","Image","key","Component","ReactDOM","render","document","getElementById"],"mappings":"g8BAaeA,MAVf,SAAgBC,GACZ,OACI,gCACQ,yBAAKC,UAAU,SAAf,eACA,yBAAKA,UAAU,cAAf,UAAoCD,EAAME,MAA1C,iBAA+DF,EAAMG,Y,MCQtEC,MAZf,SAAgBJ,GACd,OACE,yBAAKC,UAAU,iBACb,yBACEI,IAAG,cAASL,EAAMM,MAAMC,QACxBC,IAAI,QACJC,QAAS,kBAAMT,EAAMU,QAAQV,EAAMM,MAAMK,S,MCyClCC,MA9Cf,SAAgBZ,GACZ,OAAsB,OAAlBA,EAAMa,QAEF,yBAAKZ,UAAU,UACX,yBAAKA,UAAU,SACX,0BAAMA,UAAU,aAAhB,8FAIA,0BAAMA,UAAU,SAAhB,oDAIa,QAAlBD,EAAMa,QAET,yBAAKZ,UAAU,UACX,yBAAKA,UAAU,SACX,0BAAMA,UAAU,OAAhB,YACA,0BAAMA,UAAU,SAAhB,8CACA,iEAMR,yBAAKA,UAAU,UACVD,EAAMa,QACH,yBAAKZ,UAAU,SACX,0BAAMA,UAAU,WAAhB,YACA,0BAAMA,UAAU,SAAhB,yCAKJ,yBAAKA,UAAU,SACX,0BAAMA,UAAU,SAAhB,aACA,0BAAMA,UAAU,SAAhB,8C,OCqETa,E,2MArGXC,MAAQ,CACJC,OAAQC,EACRf,MAAO,EACPC,SAAU,EACVU,QAAS,M,EAGbH,QAAU,SAAAQ,GAMN,GALA,EAAKC,cAAc,EAAKJ,MAAMC,QACT,EAAKD,MAAMC,OAAOI,MACnC,SAAAd,GAAK,OAAIA,EAAMK,KAAOO,KAGTG,UAEb,OADA,EAAKC,SAAS,CAAET,SAAS,IAClB,EAAKU,WAAU,GACM,KAArB,EAAKR,MAAMb,OACpB,EAAKoB,SAAS,CAAEnB,SAAU,EAAKY,MAAMb,MAAQ,IAC7C,EAAKqB,WAAU,IAEb,EAAKD,UAAS,SAAAE,GACV,IAAMC,EAAgBD,EAAUR,OAAOU,KAAI,SAAApB,GAIvC,OAHIA,EAAMK,KAAOO,IACbZ,EAAMe,WAAY,GAEff,KAGPqB,EAAWH,EAAUtB,MAAQ,EAC7B0B,EAAcJ,EAAUrB,SAK5B,OAJIwB,EAAWH,EAAUrB,WACrByB,EAAcD,GAGX,CACHX,OAAQS,EACRvB,MAAOyB,EACPxB,SAAUyB,EACVf,QAAS,Y,EAMzBM,cAAgB,SAAAU,GAIZ,IAHA,IACIC,EACAC,EAFAC,EAAeH,EAAMI,OAGlB,IAAMD,GACTD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAGzCF,EAAiBD,EAFjBG,GAAgB,GAGhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAEzB,EAAKR,SAAS,CACVN,OAAQa,K,EAIhBN,UAAY,SAACc,GACT,EAAKf,UAAS,SAAAE,GAOV,MAAO,CACHR,OAPkBQ,EAAUR,OAAOU,KAAI,SAAApB,GAIvC,OAHIA,EAAMe,YACNf,EAAMe,WAAY,GAEff,KAIPJ,MAAO,EACPW,UAAUwB,GAAS,W,wEAKrB,IAAD,OACL,OACI,6BACI,kBAAC,EAAD,CACInC,MAAOoC,KAAKvB,MAAMb,MAClBC,SAAUmC,KAAKvB,MAAMZ,WAEzB,yBAAKF,UAAU,aACX,yBAAKA,UAAU,UACVqC,KAAKvB,MAAMC,OAAOU,KAAI,SAAApB,GAAK,OACxB,kBAACiC,EAAD,CACIC,IAAKlC,EAAMK,GACXD,QAAS,EAAKA,QACdJ,MAAOA,SAKvB,kBAAC,EAAD,CAAQkC,IAAKF,KAAKvB,MAAMb,MAAOW,QAASyB,KAAKvB,MAAMF,e,GAhGjD4B,aCHlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.f2fb5c55.chunk.js","sourcesContent":["import React from 'react'\r\nimport './styles.css'\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <header>\r\n                <div className=\"title\">Vader Click</div>\r\n                <div className=\"scoreboard\">Score: {props.score} | Top Score: {props.topScore}</div>\r\n        </header>\r\n\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport './styles.css'\r\n\r\nfunction Images(props) {\r\n  return (\r\n    <div className='img-container'>\r\n      <img \r\n        src={`img/${props.image.imgURL}`} \r\n        alt='vader' \r\n        onClick={() => props.clicked(props.image.id)}>\r\n      </img>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Images","import React from \"react\";\r\n\r\nimport \"./styles.css\";\r\n\r\nfunction Result(props) {\r\n    if (props.correct === null) {\r\n        return (\r\n            <div className=\"result\">\r\n                <div className=\"spans\">\r\n                    <span className=\"startgame\">\r\n                        Try to click on an image that you haven't before. The\r\n                        images will shuffle after you click.\r\n                    </span>\r\n                    <span className=\"quote\">\"Be careful not to choke on your convictions.\"</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    } else if (props.correct === \"win\") {\r\n        return (\r\n            <div className=\"result\">\r\n                <div className=\"spans\">\r\n                    <span className=\"win\">You win!</span>\r\n                    <span className=\"quote\">\"You were right. You were right about me.\"</span>\r\n                    <span>Click an image to play again!</span>\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className=\"result\">\r\n                {props.correct ? (\r\n                    <div className=\"spans\">\r\n                        <span className=\"correct\">Correct!</span>\r\n                        <span className=\"quote\">\r\n                            \"The force is strong with this one!\"\r\n                        </span>\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"spans\">\r\n                        <span className=\"wrong\">Try again</span>\r\n                        <span className=\"quote\">\r\n                            \"You have failed me for the last time.\"\r\n                        </span>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Result;\r\n","import React, { Component } from \"react\";\r\n\r\nimport Header from \"./components/Header\";\r\nimport Image from \"./components/Image\";\r\nimport Result from \"./components/Result\";\r\nimport imagesData from \"./images.json\";\r\n\r\nclass App extends Component {\r\n    state = {\r\n        images: imagesData,\r\n        score: 0,\r\n        topScore: 0,\r\n        correct: null\r\n    };\r\n\r\n    clicked = clickedId => {\r\n        this.shuffleImages(this.state.images);\r\n        const clickedImage = this.state.images.find(\r\n            image => image.id === clickedId\r\n        );\r\n\r\n        if (clickedImage.isClicked) {\r\n            this.setState({ correct: false });\r\n            return this.resetGame(false);\r\n        } else if (this.state.score === 11) {\r\n          this.setState({ topScore: this.state.score + 1})\r\n          this.resetGame(true)\r\n        } else {\r\n            this.setState(prevState => {\r\n                const updatedImages = prevState.images.map(image => {\r\n                    if (image.id === clickedId) {\r\n                        image.isClicked = true;\r\n                    }\r\n                    return image;\r\n                });\r\n\r\n                let newScore = prevState.score + 1;\r\n                let newTopScore = prevState.topScore;\r\n                if (newScore > prevState.topScore) {\r\n                    newTopScore = newScore;\r\n                }\r\n\r\n                return {\r\n                    images: updatedImages,\r\n                    score: newScore,\r\n                    topScore: newTopScore,\r\n                    correct: \"true\"\r\n                };\r\n            });\r\n        }\r\n    };\r\n\r\n    shuffleImages = array => {\r\n        let currentIndex = array.length,\r\n            temporaryValue,\r\n            randomIndex;\r\n        while (0 !== currentIndex) {\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n\r\n            temporaryValue = array[currentIndex];\r\n            array[currentIndex] = array[randomIndex];\r\n            array[randomIndex] = temporaryValue;\r\n        }\r\n        this.setState({\r\n            images: array\r\n        });\r\n    };\r\n\r\n    resetGame = (hasWon) => {\r\n        this.setState(prevState => {\r\n            const updatedImages = prevState.images.map(image => {\r\n                if (image.isClicked) {\r\n                    image.isClicked = false;\r\n                }\r\n                return image;\r\n            });\r\n            return {\r\n                images: updatedImages,\r\n                score: 0,\r\n                correct: (hasWon ? \"win\" : false)\r\n            };\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header\r\n                    score={this.state.score}\r\n                    topScore={this.state.topScore}\r\n                />\r\n                <div className=\"container\">\r\n                    <div className=\"images\">\r\n                        {this.state.images.map(image => (\r\n                            <Image\r\n                                key={image.id}\r\n                                clicked={this.clicked}\r\n                                image={image}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                <Result key={this.state.score} correct={this.state.correct} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}